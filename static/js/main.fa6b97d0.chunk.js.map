{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ace","require","config","set","setModuleUrl","App","props","state","value","myRef","React","createRef","onEditorChange","bind","onPaste","newValue","ReactDOM","findDOMNode","this","current","innerHTML","event","setState","text","className","mode","theme","name","height","width","ref","onChange","fontSize","showPrintMargin","focus","editorProps","$blockScrolling","wrapEnabled","highlightActiveLine","autoScrollEditorIntoView","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","showGutter","Component","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAoBMA,G,qEAAMC,EAAQ,IACpBD,EAAIE,OAAOC,IAAI,WAAY,iEAC3BH,EAAIE,OAAOE,aAAa,6BAA8B,qF,IAmEvCC,E,YA/Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAM,IAGR,EAAKC,MAAQC,IAAMC,YACnB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBARE,E,4EAWJE,GACZC,IAASC,YAAYC,KAAKT,MAAMU,SAASC,UAAYL,I,8BAGhDM,GACNH,KAAKI,SAAS,CACZd,MAAOa,EAAME,S,+BAIP,IACDf,EAASU,KAAKX,MAAdC,MACP,OACE,yBAAKgB,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CACEC,KAAK,OACLC,MAAM,UACNC,KAAK,eACLC,OAAS,OACTC,MAAO,OACPC,IAAI,YACJC,SAAUb,KAAKN,eACfE,QAAUI,KAAKJ,QACfkB,SAAU,GACVC,iBAAiB,EACjBC,OAAO,EACPC,YAAa,CAAEC,iBAAiB,GAChCC,aAAc,EACdC,qBAAqB,EACrBC,0BAA2B,EAC7B/B,MAAOA,EACLgC,WAAY,CACVC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,iBAAiB,EACjBC,QAAS,EACTC,YAAY,MAIpB,yBAAKtB,UAAU,oBACX,yBAAKM,IAAKZ,KAAKT,e,GAxDXsC,aCbEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNpC,IAASqC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fa6b97d0.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from \"react-dom\";\nimport AceEditor from \"react-ace\";\n\nimport './App.css';\n\nimport \"ace-builds/src-min-noconflict/mode-javascript\";\nimport \"ace-builds/src-min-noconflict/theme-tomorrow_night_eighties\";\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\nimport \"ace-builds/src-min-noconflict/ext-spellcheck\";\nimport \"ace-builds/src-min-noconflict/snippets/javascript\";\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/mode-html\";\n// import \"ace-builds/src-noconflict/worker-html\";\n// import \"ace-builds/src-noconflict/worker-javascript\";\nimport \"ace-builds/src-noconflict/snippets/html\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\n\nconst ace = require('ace-builds/src-noconflict/ace');\nace.config.set(\"basePath\", \"https://cdn.jsdelivr.net/npm/ace-builds@1.4.3/src-noconflict/\");\nace.config.setModuleUrl('ace/mode/javascript_worker', \"https://cdn.jsdelivr.net/npm/ace-builds@1.4.3/src-noconflict/worker-javascript.js\");\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value:\"\"\n    }\n\n    this.myRef = React.createRef();\n    this.onEditorChange = this.onEditorChange.bind(this)\n    this.onPaste = this.onPaste.bind(this);\n  }\n\n  onEditorChange(newValue) {\n     ReactDOM.findDOMNode(this.myRef.current).innerHTML = newValue\n  }\n\n  onPaste(event){\n    this.setState({\n      value: event.text\n    })\n  }\n\n  render() {\n    const {value} = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"flex-split\">\n          <div className=\"flex-split-left\">\n              <AceEditor\n                mode=\"html\"\n                theme=\"monokai\"\n                name=\"awesome-code\"\n                height= {\"100%\"}\n                width={\"100%\"}\n                ref=\"aceEditor\"\n                onChange={this.onEditorChange}\n                onPaste= {this.onPaste}\n                fontSize={14}\n                showPrintMargin={true}\n                focus={true}\n                editorProps={{ $blockScrolling: true }}\n                wrapEnabled= {true}\n                highlightActiveLine={true}\n                autoScrollEditorIntoView ={true}\n              value={value}\n                setOptions={{\n                  enableBasicAutocompletion: true,\n                  enableLiveAutocompletion: true,\n                  enableSnippets: true,\n                  showLineNumbers: true,\n                  tabSize: 2,\n                  showGutter: true\n                }}/>\n          </div>\n\n          <div className=\"flex-split-right\">\n              <div ref={this.myRef} /> \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}